openapi: 3.0.0
info:
  description: ""
  version: "1.0.0"
  title: "Todo API"
servers:
  - url: http://localhost:3000
    description: local URL
tags:
- name: "Authentication"
  description: "Authentication related API's like login, register, etc"
- name: "Task"
  description: "Task CRUD API's"
schemes:
- "https"
- "http"
paths:
  /register:
    post:
      summary: Register API
      tags: [Authentication]
      consumes:
        - "application/json"
      produces:
      - "application/json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - name
                - email
                - password
                - repeat_password
              properties:
                name: 
                  type: "string"
                  example: "John"
                email:
                  type: "string"
                  example: "john@example.com"
                password:
                  type: "string"
                  example: "TT ^&4675884"
                repeat_password:
                  type: "string"
                  example: "TT ^&4675884"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/resWithoutData'
              example:
                status: true           
                statusCode: 200
                statusMessage: "Registered Successfully"
        422:
          description: Validation Errors
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/resWithoutData'
              example:
                status: false           
                statusCode: 422
                statusMessage: "\"name\" is not allowed to be empty"
        500:
          $ref: '#/components/responses/500Res'
  /login:
    post:
      summary: Login API
      tags: [Authentication]
      consumes:
        - "application/json"
      produces:
        - "application/json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - email
                - password
              properties:
                email:
                  type: "string"
                  example: "john@example.com"
                password:
                  type: "string"
                  example: "TT ^&4675884"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: number
                  statusMessage:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      refreshToken:
                        type: string
              example:
                status: true           
                statusCode: 200
                statusMessage: "Login Successfully"
                data:
                  token: "Randon string"
                  refreshToken: "Randon string"
        422:
          description: Validation Errors
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/resWithoutData'
              example:
                status: false           
                statusCode: 422
                statusMessage: "\"email\" is not allowed to be empty"
        400:
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/resWithoutData'
              example:
                status: false           
                statusCode: 400
                statusMessage: "Something went wrong please try again"
        500:
          $ref: '#/components/responses/500Res'
  /token:
    post:
      summary: Refresh Token API
      tags: [Authentication]
      consumes:
        - "application/json"
      produces:
        - "application/json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - token
              properties:
                token:
                  type: "string"
                  example: "Random string"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  status:
                    type: boolean
                  statusCode:
                    type: number
                  statusMessage:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
              example:
                status: true           
                statusCode: 200
                statusMessage: "Access token retrived successfully."
                data:
                  token: "Randon string"
        400:
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/resWithoutData'
              example:
                status: false           
                statusCode: 400
                statusMessage: "Something went wrong please try again"
        500:
          $ref: '#/components/responses/500Res'
components:
  # Reusable schemas (data models)
  schemas:
    resWithoutData:
      type: object
      properties:
        status:
          type: boolean
        statusCode:
          type: number
        statusMessage: 
          type: string
    
  # Reusable path, query, header and cookie parameters
  parameters:
    
  # Security scheme definitions (see Authentication)
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
    
  # Reusable request bodies
  requestBodies:
    
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    500Res:
      description: Server Errors
      content:
        application/json:
          schema: 
            type: object
            properties:
              status:
                type: boolean
              statusCode:
                type: number
              statusMessage: 
                type: string
            example: 
              status: false
              statusCode: 500
              message: 'Internal server error'  
    
  # Reusable response headers
  headers:
    
  # Reusable examples
  examples:
  
  # Reusable links
  links:
    
  # Reusable callbacks
  callbacks:
security:
  - bearerAuth: []      
